#include "todas_bibliotecas.h"

//Variáveis Globais-------------------------------------------------------------------
    Tiponave _nave;
    Tipobarreira* _barreira;
    Tipogrupo* _grupo;
    Tipoinimigo* _inimigo;
    Tipobonus* _inimigobonus;
    Tipotironave* _tiro_nave;
    int colisaotironavein=0;//Colisão do tiro da nave com o inimigo
    int colisaotironavebn=0;//Colisão do tiro da nave com o inimigo bonus
    int colisaotironavebr=0;//Colisão do tiro da nave com a barreira
//------------------------------------------------------------------------------------

//Vídeo-------------------------------------------------------------------------------
    #define W 800//Largura do vídeo
    #define H 600   //Altura do vídeo
    #define bits 32 //Define a taxa de bits do vídeo
    #define nomejogo "Space Invaders - Remake"
    #define pathicon "Imagens/icon.bmp"
    #define pathfundo "Imagens/fundojogo.jpg"
    #define GAME_OVER "Imagens/gameover.jpg"

    typedef struct {
        SDL_Surface* screen;  //cria o ponteiro superfície para a tela
        SDL_Surface* imgscreen; //cria a superfície para imagem de fundo
        SDL_Rect quadfundo;
    } Tipotela;

    Tipotela* tela;
//------------------------------------------------------------------------------------

//Som---------------------------------------------------------------------------------
    //Mix_Music* music;
    //#define MUSICA_MENU "Sons/Esquadrilha_Abutre.mp3"
//-------------------------------------------------------------------------- ----------


//Inicializa Dados ou Fase------------------------------------------------------------------------------------------------------------
void inicializa(Tiponave* nave, Tipobarreira* barreira, Tipogrupo* grupo, Tipoinimigo* inimigo, Tipobonus* bonus, Tipotironave* tiro_nave)
{

    //Dados da nave-----------------------------------------------------------------------------------------
    nave->passos=4;
    nave->incx=0;
    //Estrutra SDL_Rect
    nave->quad.x = W/2;    nave->quad.y = H*0.94;;    nave->quad.w = NAVE_L1;    nave->quad.h = NAVE_L2;
    nave->quad_origem = nave->quad;
    nave->quad_origem.x =0; nave->quad_origem.y =0;
    nave->vidas=MAX_VIDA_NAVE;
    nave->img=IMG_Load(IMG_NAVE);

    //Dados da tiro da nave---------------------------------------------------------------------------------
    int indice=0;
    for(indice=0;indice<QTD_TIROSN_F1;indice++)
    {
        tiro_nave[indice].passos=6;
        tiro_nave[indice].img=IMG_Load(IMG_TIRON);
        tiro_nave[indice].ativo=0;
        tiro_nave[indice].anima=0;

        //SDL_Rect
        tiro_nave[indice].quad.x = ((nave->quad.x + nave->quad.w) + nave->quad.x)/2;
        tiro_nave[indice].quad.y = nave->quad.y - nave->quad.h + 13;
        tiro_nave[indice].quad.w = TIRON_L1;     tiro_nave[indice].quad.h=TIRON_L2;

        //SDL_Rect origem
        tiro_nave[indice].quad_origem=tiro_nave[indice].quad;
        tiro_nave[indice].quad_origem.x=0; tiro_nave[indice].quad_origem.y=0;
    }


    //Dados da Barreira-------------------------------------------------------------------------------------
    for (indice=0;indice<BARREIRA_QTD;indice++)
    {
        barreira[indice].img=IMG_Load(IMG_BARREIRA);
        barreira[indice].quad.x=((W-(BARREIRA_L1*BARREIRA_QTD))/(BARREIRA_QTD+1))+((((W-(BARREIRA_L1*BARREIRA_QTD))/(BARREIRA_QTD+1))+BARREIRA_L1)*indice);
        barreira[indice].quad.y=(nave->quad.y-(BARREIRA_L2*1.3));
        barreira[indice].quad.w=BARREIRA_L1;
        barreira[indice].quad.h=BARREIRA_L2;

        barreira[indice].quad_origem = barreira[indice].quad;
        barreira[indice].quad_origem.x=0;   barreira[indice].quad_origem.y=0;

        barreira[indice].ativa=1;
        barreira[indice].energia=MAX_ENERGIA_BARREIRA;
        barreira[indice].explode=0;
    }
    //------------------------------------------------------------------------------------------------------

    //Dados dos inimigos=================================================================================================================

    //Dados relativos ao conjunto dos inimigos------------------------------------------------------------------------------------
    grupo->passosdados=0;//Já se pode fazer a troca de imagem? Faz a verificação...

    int ROWS=(GRUPO_FASE1_QTD/COLS); //Variável que recebe a quantidade de colunas
    grupo->quadgroup.x=(W-(TAMANHO_INIMIGOL1*COLS))/2;
    grupo->quadgroup.y=H/6;

    grupo->quadgroup.w=COLS*TAMANHO_INIMIGOL1*DT;//Largura
    grupo->quadgroup.h=ROWS*TAMANHO_INIMIGOL2*DT;//Altura

    grupo->passosx=1;//Tamanho do passo na horizontal
    grupo->passosy=15;//Tamanho do passo na vertical
    //----------------------------------------------------------------------------------------------------------------------------

    zerabonus(bonus, H); //Dados do bonus

    //Dados relativo aos inimigos-------------------------------------------------------------------------------------------------
    int i=0,j=0;

    for(i=0;i<ROWS;i++)
    {
        for(j=0;j<COLS;j++)
        {
            //Estrutra SDL_Rect de destino
            inimigo[i*COLS+j].quad.x = grupo->quadgroup.x + (TAMANHO_INIMIGOL1 * j * DT);//posição inicial X (DT distância entre um e outro)
            inimigo[i*COLS+j].quad.y = grupo->quadgroup.y + (TAMANHO_INIMIGOL2 * i * DT); //posição inicial Y
            inimigo[i*COLS+j].quad.w = TAMANHO_INIMIGOL1;
            inimigo[i*COLS+j].quad.h = TAMANHO_INIMIGOL2;

            //Estrutra SDL_Rect de origem, será de início igual a de destino.
            inimigo[i*COLS+j].quad_origem = inimigo[i*COLS+j].quad;
            inimigo[i*COLS+j].quad_origem.x=0;
            inimigo[i*COLS+j].quad_origem.y=0;

            inimigo[i*COLS+j].img_troca=0;
            inimigo[i*COLS+j].atingido=0;
            inimigo[i*COLS+j].explode=0;

            if((i==4)||(i==3))
                inimigo[i*COLS+j].img=IMG_Load(IMG_INIMIGO10);
            else if ((i==2)||(i==1))
                inimigo[i*COLS+j].img=IMG_Load(IMG_INIMIGO20);
            else
                inimigo[i*COLS+j].img=IMG_Load(IMG_INIMIGO30);
        }
    }
    //----------------------------------------------------------------------------------------------------------------------------
    //===================================================================================================================================
}
//------------------------------------------------------------------------------------------------------------------------------------

//Atualiza a tela----------------------------------------------------------------------
void atualiza(Tipotela* video, Tiponave* nave, Tipoinimigo* inimigo, int qtd, Tipobarreira* barreira, Tipobonus* bonus, Tipotironave* tiro_nave)
{
    int indice=0;

    //preenche o fundo com cor preta
    SDL_FillRect(video->screen,NULL, SDL_MapRGB(video->screen->format,0,0,0));

    if (nave->vidas>0)
    {
        //Blit Relativo ao fundo
        SDL_BlitSurface(video->imgscreen, &video->quadfundo, video->screen, &video->quadfundo);

        //Blit Relativo à nave
        SDL_BlitSurface(nave->img, &nave->quad_origem, video->screen, &nave->quad);

        //Blits tiro da nave
        for(indice=0;indice<QTD_TIROSN_F1;indice++)
        {
            if(tiro_nave[indice].ativo)
            {
                SDL_BlitSurface(tiro_nave[indice].img, &tiro_nave[indice].quad_origem, video->screen, &tiro_nave[indice].quad);
                anima_tiro_n(tiro_nave, indice);
            }
        }


        //Blit Relativo à barreira
        for(indice=0;indice<BARREIRA_QTD;indice++)
        {
            if((barreira[indice].ativa) || ((barreira[indice].explode!=0)  && (barreira[indice].explode<T_SPRITE_I_EXPLOSAO)))
            {
                SDL_BlitSurface(barreira[indice].img, &barreira[indice].quad_origem, video->screen, &barreira[indice].quad);
                if (barreira[indice].explode!=0)
                    explosao(&barreira[indice].quad_origem, &barreira[indice].explode);
            }
        }

        //Blit Relativo ao inimigo
        for (indice=0;indice<qtd;indice++)
        {
            if ((!inimigo[indice].atingido) || ((inimigo[indice].explode!=0)  && (inimigo[indice].explode<T_SPRITE_I_EXPLOSAO)))
            {
                SDL_BlitSurface(inimigo[indice].img, &inimigo[indice].quad_origem, video->screen, &inimigo[indice].quad);
                //Chama a função que faz à inimação da explosão.
                if (inimigo[indice].explode!=0)
                    explosao(&inimigo[indice].quad_origem, &inimigo[indice].explode);
            }
        }

        //Blit relativo ao inimigo bonus
        if((bonus->ativo) || ((bonus->dados.explode!=0)  && (bonus->dados.explode < T_SPRITE_I_EXPLOSAO)))
            SDL_BlitSurface(bonus->dados.img, &bonus->dados.quad_origem, video->screen, &bonus->dados.quad);
            //Chama a função que faz à inimação da explosão.
            if (bonus->dados.explode!=0)
                explosao(&bonus->dados.quad_origem, &bonus->dados.explode);

            if (bonus->dados.explode>=T_SPRITE_I_EXPLOSAO)
                zerabonus(bonus, video->screen->h);
    }
    else
    {
        //Blit Relativo ao fundo GAME OVER
        video->imgscreen=IMG_Load(GAME_OVER);
        SDL_BlitSurface(video->imgscreen, &video->quadfundo, video->screen, &video->quadfundo);
    }

    SDL_Flip(video->screen); //atualiza tela
}
//-------------------------------------------------------------------------------------


//função principal do jogo
int main(int argc, char** argv)
{

    SDL_Event event; //cria a variável que receberá os eventos
    int indice=0;
    int quit=0;
    atexit(SDL_Quit);

    //inicializa o vídeo, o áudio e o temporizador
    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER);

    //define o nome e ícone da janela-------------------------------------------------------
    SDL_WM_SetCaption(nomejogo,nomejogo);

    Uint32          colorkey;
    SDL_Surface     *image;
    image =         SDL_LoadBMP(pathicon);
    colorkey =      SDL_MapRGB(image->format, 0, 255, 18);
    SDL_SetColorKey(image, SDL_SRCCOLORKEY, colorkey);
    SDL_WM_SetIcon(image,NULL);
    //--------------------------------------------------------------------------------------

    //Janela e Fundo------------------------------------------------------------------------
    tela=(Tipotela*) malloc (sizeof(Tipotela));
    //cria a tela com resolução definida SDL_SWSURFACE na memória RAM SDL_SHSURFACE na placa de vídeo
    tela->screen=SDL_SetVideoMode(W, H, bits, SDL_SWSURFACE | SDL_HWSURFACE);
    tela->imgscreen=IMG_Load(pathfundo);//carrega a imagem relativa ao fundo
    //estrutra SDL_Rect
    tela->quadfundo.x=0;    tela->quadfundo.y=0;    tela->quadfundo.w=W;    tela->quadfundo.h=H;
    //--------------------------------------------------------------------------------------

    //Música--------------------------------------------------------------------------------
    //Mix_OpenAudio(44100, AUDIO_S16SYS, 2, 4096); //Inicializa o áudio
    //music = Mix_LoadMUS(MUSICA_MENU);//Carregando a música
    //Mix_VolumeMusic(20);//Definindo o volume
    //Mix_PlayMusic(music,-1);
    //--------------------------------------------------------------------------------------

    //Inicializa a fase
    _barreira=(Tipobarreira*) malloc (sizeof(Tipobarreira)*BARREIRA_QTD);
    _grupo=(Tipogrupo*)malloc(sizeof(Tipogrupo));
    _inimigo=(Tipoinimigo*) malloc (sizeof (Tipoinimigo)*GRUPO_FASE1_QTD);
    _inimigobonus=(Tipobonus*) malloc (sizeof (Tipobonus));
    _tiro_nave=(Tipotironave*) malloc (sizeof(Tipotironave)*QTD_TIROSN_F1);


    inicializa(&_nave, _barreira, _grupo, _inimigo, _inimigobonus, _tiro_nave);

    //atualiza/cria a tela
    atualiza(tela, &_nave, _inimigo, GRUPO_FASE1_QTD, _barreira, _inimigobonus, _tiro_nave);

    //enquanto o usuário não fecha a janela-------------------------------------------------------------------------------
    while(!quit)
    {
        //enquanto há eventos do teclado/mouse-----------------
        while(SDL_PollEvent(&event) && (_nave.vidas>0))
        {
            //se fechou a jenela------------------------------
            if(event.type==SDL_QUIT)
                quit=1;
            //------------------------------------------------

            //se pressionou alguma tecla----------------------
            else if(event.type == SDL_KEYDOWN)
            {
                //verifica qual tecla foi pressionada
                switch(event.key.keysym.sym)
                {
                    //caso for seta para direita-------------
                    case SDLK_RIGHT:
                        _nave.incx=_nave.passos;
                    break;
                    //---------------------------------------

                    //caso for seta para esquerda------------
                    case SDLK_LEFT:
                        _nave.incx=-_nave.passos;
                    break;
                    //---------------------------------------

                    //Caso for espaço atira
                    case SDLK_SPACE:
                        atira_nave(_tiro_nave, _nave);
                    break;
                }
            }
            //------------------------------------------------

            //se soltou a tecla-------------------------------
            else if((event.type==SDL_KEYUP) && (event.key.keysym.sym!=SDLK_SPACE))//(event.key.keysym.sym!=SDLK_SPACE) psrs poder atirar e andar ao mesmo tempo
                _nave.incx=0; //não anda nada
            //------------------------------------------------
        }

        //chamando a função para movimentação da nave-----
        movenave(tela->screen, &_nave);
        //------------------------------------------------

        //chamando a função para movimentação do inimigo--
        movegrupo(tela->screen, _grupo, _inimigo);
        //------------------------------------------------

        //Chama o inimigo bonus---------------------------
        movebonus(tela->screen, _inimigobonus);
        //------------------------------------------------

        //Move tiro nave------------------------------------------------------------------------------------------
        for(indice=0;indice<QTD_TIROSN_F1;indice++)
        {
            if(_tiro_nave[indice].ativo)
            {
                colisaotironavein=coltiro_nave_inimigo(_tiro_nave, indice, _inimigo, tela->screen);
                colisaotironavebn=coltiro_nave_bonus(_tiro_nave, indice, _inimigobonus, tela->screen);
                colisaotironavebr=coltiro_nave_barreira (_tiro_nave, indice, _barreira,  tela->screen);
                movetiro_nave(_tiro_nave, indice, (colisaotironavein || colisaotironavebn || colisaotironavebr));
            }
        }
        //---------------------------------------------------------------------------------------------------------

        //Atualiza blits
        atualiza(tela, &_nave, _inimigo, GRUPO_FASE1_QTD, _barreira, _inimigobonus, _tiro_nave);
    }
    //------------------------------------------------------------------------------------------------------------

    free(_inimigo);//libera a memória
    //Mix_CloseAudio();
    SDL_Quit();//fecha a biblioteca

    return 0;
}
