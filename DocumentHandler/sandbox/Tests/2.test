#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
//#include <time.h>
#include <math.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <unistd.h>
#include <papi.h>

#define INF INT_MAX
#define OUT_PATH "orderned-vect.out"

typedef struct
{
	int id;
	unsigned int begin;
	unsigned int size;

	int* vect;
	int vectID;

} SHARED_INT_ARRAY;

void merge(int*, int, int, int);
void mergeSort(int*, int, int);
SHARED_INT_ARRAY* readFile(char*);
void splitArray(int*, int, int);
SHARED_INT_ARRAY* createSharedVect(int);
void destroySharedVect(SHARED_INT_ARRAY*);
void* runMergeSort(void*);
void printVect(int*, int);
int castInteger(char*);
void fprintVect(int*, int, char*);

int main(int argc, char** argv)
{	
	SHARED_INT_ARRAY* array;
	int* vect;

	int size = 0;
	int nProcess = 1;

	//clock_t tStart;
	//double tEnd;
	long_long start_usec, end_usec;

	printf("\nReading file...");
	array = readFile(argv[1]);
	vect = array->vect;
	size = array->size;
	
	printf("\nFile: '%s' read with sucess!", argv[1]);

	if(argc > 2)
		nProcess = castInteger(argv[2]);

	if(nProcess > size)
		nProcess = size;

	printf("\nRunning ordering algorithm with %d process...", nProcess);
	//tStart = clock();
	if (PAPI_library_init(PAPI_VER_CURRENT) != PAPI_VER_CURRENT)
		exit(1);

	start_usec = PAPI_get_real_usec();
	
	if(nProcess > 1)
		splitArray(vect, size, nProcess);
	else
		mergeSort(vect, 0, size);

	//tEnd = (double)(clock() - tStart)/CLOCKS_PER_SEC;
	end_usec = PAPI_get_real_usec();

	printf("\nFinished ordering.");
	printf("\nTotal time spent: %lld (μs)\n", end_usec - start_usec);
	fprintVect(vect, size, OUT_PATH);
	printf("\n");

	destroySharedVect(array);

	return 0;
}

void splitArray(int* vect, int size, int nProcess)
{
	SHARED_INT_ARRAY* array_args;

	unsigned int length;
	unsigned int i;
	unsigned int remainder;
	
	int pid = 0;
	int status;

	int shmID;

	length = floor(size / nProcess);
	remainder = size % nProcess;

	shmID = shmget(IPC_PRIVATE, sizeof(SHARED_INT_ARRAY) * nProcess, IPC_CREAT | 0666);
	array_args = (SHARED_INT_ARRAY*) shmat(shmID, NULL, 0);

	for(i = 0; i < nProcess - 1 ; i++)
	{
		array_args[i].begin = i * length;
		array_args[i].vect = vect + array_args[i].begin;
		array_args[i].size = length;

		pid = fork();

		if (pid < 0)
		{
			perror("fork");
			exit(1);
		}
		else if (pid == 0)
		{
			runMergeSort((void*) &array_args[i]);
			exit(0);
		}
		else
			array_args[i].id = pid;
	}

	array_args[i].begin = i * length;
	array_args[i].vect = vect + array_args[i].begin;
	array_args[i].size = length + remainder;

	runMergeSort((void*) &array_args[i]);

	for(i = 0; i < nProcess - 1; i++)
		waitpid(array_args[i].id, &status, 0);

	for(i = 0; i < nProcess - 1; i++)
	{
		merge(vect, 0, array_args[i + 1].begin, array_args[i + 1].begin + array_args[i + 1].size);
	}

	shmdt((void *) array_args);
	shmctl(shmID, IPC_RMID, NULL);			
}


SHARED_INT_ARRAY* createSharedVect(int size)
{
	SHARED_INT_ARRAY* array;
	int shmID;
	int vectID;
	
	shmID = shmget(IPC_PRIVATE, sizeof(SHARED_INT_ARRAY), IPC_CREAT | 0666);
	array = (SHARED_INT_ARRAY*) shmat(shmID, NULL, 0);

	if(size > 0)
	{

		vectID = shmget(IPC_PRIVATE, size * sizeof(int), IPC_CREAT | 0666);
		array->vect = (int*) shmat(vectID, NULL, 0);

		if ((shmID < 0) || (vectID < 0))
			perror("shmget");

		array->vectID = vectID;
	}

	array->id = shmID;

	array->begin = 0;
	array->size = size;
	
	return array;	
}


void destroySharedVect(SHARED_INT_ARRAY* array)
{
	int shmid = array->id;

	if(array->size > 0)
	{
		shmdt((void *) array->vect);
		shmctl(array->vectID, IPC_RMID, NULL);
	}
	
	shmdt((void *) array);
	shmctl(shmid, IPC_RMID, NULL);	
}


void* runMergeSort(void* args)
{
	SHARED_INT_ARRAY* array = (SHARED_INT_ARRAY*) args;
	
	int* vect = array->vect;
	unsigned int size = array->size;

	mergeSort(vect, 0, size);

	return 0;
}


void merge(int* vect, int beginL, int beginR, int size)
{

	int *vectL;
	int *vectR;
	int sizeL;
	int sizeR;

	int i, j, k;

	sizeL = beginR - beginL;
	sizeR = size - beginR;

	vectL = (int*) malloc (sizeof(int) * (sizeL + 1));
	vectR = (int*) malloc (sizeof(int) * (sizeR + 1));
	
	for(i  = 0; i < sizeL; i++)
		vectL[i] = vect[beginL + i];

	for(j  = 0; j < sizeR; j++)
		vectR[j] = vect[beginR + j];

	vectL[sizeL] = INF;
	vectR[sizeR] = INF;

	i = 0; j = 0;
	
	for(k = beginL; k < size; k++)
	{
		if(vectL[i] <= vectR[j])
		{
			vect[k] = vectL[i];
			i++;
		}
		else
		{
			vect[k] = vectR[j];
			j++;
		}
	}
}


void mergeSort(int* vect, int begin, int size)
{
	int beginR;	

	if(begin < size - 1)
	{
		beginR = floor((begin + size) / 2);
		mergeSort(vect, begin, beginR);
		mergeSort(vect, beginR, size);
		merge(vect, begin, beginR, size);
	}
}

SHARED_INT_ARRAY* readFile(char* path)
{
	SHARED_INT_ARRAY* array;
	int size = 0;
	int rLine = 0;

	FILE* file;
	
	file = fopen(path, "r");

	if (file == NULL)
	{
		printf("\nError opening file: %s.\n", path);
		exit(1);
	}

	fscanf(file, "--size: %d\n", &size);
	array = createSharedVect(size);
	array->begin = 0;
	array->size = size;

	while(!feof(file))
	{		
		if(rLine < size - 1)
		{
			fscanf(file, "%d\n", &array->vect[rLine]);
			rLine++;
		}
		else
			fscanf(file, "%d", &array->vect[rLine]);
	}

	fclose(file);

	return array;
}

void printVect(int* vect, int size)
{
	int i;

	if(size > 0)
	{			
		printf("\n[");

		for(i = 0; i < size - 1; i++)
			printf("%d ", vect[i]);
		
		if(i == size - 1)
			printf("%d", vect[i]);

		printf("]\n");
	}
}

void fprintVect(int* vect, int size, char* path)
{
	FILE* file;
	int i;

	file = fopen(path, "w");
	
	if (file == NULL)
	{
		printf("\nError opening file: %s.\n", path);
		exit(1);
	}

	if(size > 0)
	{			
		for(i = 0; i < size - 1; i++)
			fprintf(file, "%d\n", vect[i]);
		
		if(i == size - 1)
			fprintf(file, "%d", vect[i]);
	}

	fclose(file);
}


/*Converte um array de char num inteiro*/
int castInteger(char* n)
{
       int i = 0;
       int signal = 1;
       int integer = 0;
       
       if (n == NULL)
               return 0;


	//Se o número for negativo
       if (n[0] == '-')
       {
               signal = -1;
               i = 1;  
       }

       //Define a parte inteira
       while (n[i] != '\0')
       {               
               integer = (integer * 10) + (n[i] - 48);
               i++;
       }       

       return signal*(integer);
}

